#!/usr/bin/env python

# Copyright (c) 2013-2016, Rethink Robotics
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the Rethink Robotics nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from dynamic_reconfigure.parameter_generator_catkin import (
    ParameterGenerator,
    double_t,
)

gen = ParameterGenerator()

gen.add(
    'goal_time', double_t, 0,
    "Amount of time (s) controller is permitted to be late achieving goal",
    0.1, 0.0, 120.0,
)
gen.add(
    'stopped_velocity_tolerance', double_t, 0,
    "Maximum velocity (m/s) at end of trajectory to be considered stopped",
    0.25, -1.0, 1.0,
)

joints = ('right_j0', 'right_j1', 'right_j2', 'right_j3', 'right_j4','right_j5', 'right_j6',)

params = ('_goal', '_trajectory',)
msg = (
    " - maximum final error",
    " - maximum error during trajectory execution",
    )
min = (-1.0, -1.0,)
default = (-1.0, 0.2,)
max = (1.0, 1.0,)

for idx, param in enumerate(params):
    for joint in joints:
        gen.add(
            joint + param, double_t, 0, joint + msg[idx],
            default[idx], min[idx], max[idx]
        )

exit(gen.generate('intera_interface', '', 'SawyerPositionJointTrajectoryActionServer'))
